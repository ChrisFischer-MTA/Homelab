name: homelab
services:
  # Ollama API Service
  ollama-api-intel-gpu-container:
    image: ghcr.io/chrisfischer-mta/ollama-intelgpu-api:main
    restart: always
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - ollama-api-intel-volume:/root/.ollama
    environment:
      - ONEAPI_DEVICE_SELECTOR=level_zero:0
      - IPEX_LLM_NUM_CTX=16384
      - OLLAMA_CONTEXT_LENGTH=16384
    networks:
      - ollama-network
      - external-connectivity
    labels:
      - homepage.group=APIs
      - homepage.name=Ollama API
      - homepage.description=Ollama Backend API

  # Ollama WebUI
  ollama-webui:
    image: ghcr.io/open-webui/open-webui:main
    volumes:
      - ollama-webui:/app/backend/data
    depends_on:
      - ollama-api-intel-gpu-container
    environment:
      - OLLAMA_BASE_URL=http://ollama-api-intel-gpu-container:11434
      - ENABLE_WEBSOCKET_SUPPORT=false
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped
    networks:
      - ollama-network
    labels:
      - homepage.group=Services
      - homepage.name=Ollama WebUI
      - homepage.description=Ollama WebUI

  # Journaling Web Application
  journal-django-container:
    image: ghcr.io/chrisfischer-mta/journaling-application:main
    networks:
      - ollama-network
      - journal-network
      - signal-api-access
      - database-connectivity
    volumes:
      - ./journalapp/.data/db.sqlite3:/app/db.sqlite3
      - ./journalapp/.data/migrations:/app/journalmain/migrations
    environment:
      SECRET_KEY: ${JOURNAL_SECRET_KEY}
      SIGNAL_NUMBER: ${JOURNAL_SIGNAL_NUMBER}
      WEBAPP_USERNAME: ${JOURNAL_WEBAPP_USERNAME}
      DEBUG: ${JOURNAL_DJANGO_DEBUG}
      JOURNAL_APP_DB_NAME: ${JOURNAL_APP_DB_NAME}
      JOURNAL_APP_DB_USER_NAME: ${JOURNAL_APP_DB_USER_NAME}
      JOURNAL_APP_DB_PASSWORD: ${JOURNAL_APP_DB_PASSWORD}
      JOURNAL_APP_DB_HOST: ${JOURNAL_APP_DB_HOST}
      JOURNAL_APP_DB_PORT: ${JOURNAL_APP_DB_PORT}
    depends_on:
      - postgres
    labels:
      - homepage.group=Services
      - homepage.name=Journaling App
      - homepage.description=Journaling app

  # Signal API
  signal-cli-rest-api-journal:
    container_name: signal-api
    restart: always
    volumes:
      - $HOME/.local/share/signal-api:/home/.local/share/signal-cli
    environment:
      - MODE=native
    image: bbernhard/signal-cli-rest-api
    networks:
      - signal-api-access
      - external-connectivity
    labels:
      - homepage.group=APIs
      - homepage.name=Signal API
      - homepage.description=Signal API

  # Example Service
  # isolated-container:
  #  image: strm/helloworld-http
  #  networks:
  #    - isolated-network
  # Database Provider

  postgres:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - database-connectivity
    labels:
      - homepage.group=Dependencies
      - homepage.name=Postgres DB
      - homepage.description=DB supporting journal, gitlab, keycloak

  # Authentication/Identity Provider
  keycloak:
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOT_USER}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOT_PASS}
      - KC_DB=postgres
      - KC_DB_USERNAME=${KC_DB_USERNAME}
      - KC_DB_PASSWORD=${KC_DB_PASSWORD}
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KC_DB_URL=${KC_JDBC_CON_STRING}
    image: quay.io/keycloak/keycloak:latest
    networks:
      - proxy-server-network
      - database-connectivity
    command: start-dev
    depends_on:
      - postgres
    labels:
      - homepage.group=Dependencies
      - homepage.name=Keycloak SSO
      - homepage.description=Keycloak SSO utility

  proxy-container:
    image: httpd:latest
    networks:
      - proxy-server-network
      - isolated-network
      - external-connectivity
      - journal-network
      - ollama-network
      - homepage-connectivity
#      - garmin-connectivity
    volumes:
      - ./proxy-config/httpd.conf:/usr/local/apache2/conf/httpd.conf
      - ./proxy-config/httpd-vhosts.conf:/usr/local/apache2/conf/extra/httpd-vhosts.conf
    entrypoint: '/bin/bash -c "apt-get update && apt-get install -y libapache2-mod-auth-openidc && httpd-foreground"'
    labels:
      - homepage.group=Services
      - homepage.name=Proxy
      - homepage.description=SSO frontend

  # OWASP Modsec
  gateway-container:
    image: owasp/modsecurity-crs:apache-alpine
    environment:
      - BACKEND=http://homelab-proxy-container-1
      - BLOCKING_PARANOIA=1
      - ANOMALY_INBOUND=255
      - ANOMALY_OUTBOUND=255
    networks:
      - proxy-server-network
      - external-connectivity
    volumes:
      - ./modsecurity/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf:/etc/modsecurity.d/owasp-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
      - ./modsecurity/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf:/etc/modsecurity.d/owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
    ports:
      - "8080:8080"
    depends_on:
      - proxy-container
    labels:
      - homepage.group=Dependencies
      - homepage.name=WAF
      - homepage.description=Modsec WAF

  # Watchtower, the preferred solution to keeping everything up to date with minimal questions asked
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - homepage.group=Services
      - homepage.name=Watchtower
      - homepage.description=Auto updates containers
#    environment:
#      - WATCHTOWER_POLL_INTERVAL=60

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    volumes:
      - ./homepage/:/app/config
      - /var/run/docker.sock:/var/run/docker.sock # pass local proxy
#    ports:
#      - 3000:3000
    restart: unless-stopped
    networks:
      - homepage-connectivity
    environment:
      - HOMEPAGE_ALLOWED_HOSTS=homepage-test.local:8080
#      - LOG_LEVEL=debug
    user: root

  # Test backup service
  #backup-service:
  #  image: ubuntu:latest
  #  restart: unless-stopped
  #  networks:
  #    - external-connectivity
  #  entrypoint: /bin/bash -c "DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -qq --force-yes cron && service cron start && echo '* * * * * echo 'test' >> /tmp/l.log' > /var/spool/cron/crontabs/root && sleep 60000" 
#    volumes:
#      - ./backup/root:/etc/crontabs/root
  #  labels:
  #    - homepage.group=Dependencies
  #    - homepage.name=Ubuntu Backup
  #    - homepage.description=Has mounts to data, automatically queues data for backups

#  garmin-connector:
#    image: ghcr.io/chrisfischer-mta/garmin-connector:main
#    restart: always
#    environment:
#      - DEBUG=False
#    volumes:
#      - ./data:/opt/garmin/data
#      - ./GarminConnectConfig.json:/opt/garmin/GarminConnectConfig.json

volumes:
  postgres_data:
    driver: local
  ollama-webui: {}
  ollama-api-intel-volume: {}

networks:
  isolated-network:
    driver: bridge
    internal: true
  ollama-network:
    driver: bridge
    internal: true
  journal-network:
    driver: bridge
    internal: true
  signal-api-access:
    driver: bridge
    internal: true
  proxy-server-network:
    driver: bridge
    internal: true
  database-connectivity:
    driver: bridge
    internal: true
  homepage-connectivity:
    driver: bridge
    internal: true
#  garmin-connectivity:
#    driver: bridge
#    internal: true
  external-connectivity:
    driver: bridge

